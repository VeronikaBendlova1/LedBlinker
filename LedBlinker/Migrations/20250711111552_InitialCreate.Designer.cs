// <auto-generated />
using System;
using LedBlinker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LedBlinker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250711111552_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.36");

            modelBuilder.Entity("LedBlinker.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("ConfigurationInterval")
                        .HasColumnType("REAL");

                    b.Property<int>("ConfigurationLedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationLedId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("LedBlinker.Models.Led", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Interval")
                        .HasColumnType("REAL");

                    b.Property<string>("LogHistory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Leds");
                });

            modelBuilder.Entity("LedBlinker.Models.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogsLedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LogsLedId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("LedBlinker.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StateActual")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StateLedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StateLedId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("LedBlinker.Models.Configuration", b =>
                {
                    b.HasOne("LedBlinker.Models.Led", "ConfigurationLed")
                        .WithMany()
                        .HasForeignKey("ConfigurationLedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigurationLed");
                });

            modelBuilder.Entity("LedBlinker.Models.Logs", b =>
                {
                    b.HasOne("LedBlinker.Models.Led", "LogsLed")
                        .WithMany()
                        .HasForeignKey("LogsLedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogsLed");
                });

            modelBuilder.Entity("LedBlinker.Models.State", b =>
                {
                    b.HasOne("LedBlinker.Models.Led", "StateLed")
                        .WithMany()
                        .HasForeignKey("StateLedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateLed");
                });
#pragma warning restore 612, 618
        }
    }
}
